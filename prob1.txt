using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using Microsoft.VisualBasic;



namespace DFA
{
    public partial class Form1 : Form
    {

        public static string userInput = "";
        public static int inputLen;
        public List<String> letterList = new List<String>();

        public bool isPalindrome = true;

        public Form1()
        {
            InitializeComponent();
            //Microsoft.VisualBasic.Interaction.InputBox("test");

        }

        private void button1_Click(object sender, EventArgs e)
        {
            userInput = userInputBox.Text;
            inputLen = userInput.Length;
            char[] inputCArray = userInput.ToCharArray();

            for (int i = 0; i < userInput.Length; i++)
            {
                char x = inputCArray[i];
                string y = x.ToString();
                letterList.Add(y);
            }

            

            if (stringIsValid(userInput))
            {
                MessageBox.Show("The string " + userInput + " is a palindrome.");
            }
            else
            {
                MessageBox.Show("The string " + userInput + " is not a palindrome.");
            }

        }

        public bool stringIsValid(string w) 
        {
            List<String> theStack = new List<String>();

            if ((inputLen % 2) == 0)
            {
                //logic for if it's even

                int halfLen = inputLen / 2;
                for (int i = halfLen-1; i > -1; i++)
                { //it counts down instead of up to better simulate the logic of a stack
                    //that way, we can just start from index 0 of theStack and it's simpler
                    string s = letterList.ElementAt(i);
                    theStack.Add(s);
                }

                int x = 0;
                //now we compare the stack against the second half of the input
                for (int i = halfLen; i < inputLen; i++)
                {
                    string a = letterList.ElementAt(i);
                    string b = theStack.ElementAt(0);
                    x++;
                    if (String.Equals(a,b))
                    {
                        //so far, so good.
                        //loop keeps going
                        isPalindrome = true;
                    }
                    else
                    {
                        //we now know that this isn't a palindrome;
                        //no further testing needed
                        isPalindrome = false;
                        break;
                    }
                }
            }

            else if ((inputLen % 2) == 1) 
            {
                //logic for if it's odd
                int halfLenRoundedUp = (inputLen / 2) + 1;
                for (int i = halfLenRoundedUp - 1; i > -1; i++)
                { //it counts down instead of up to better simulate the logic of a stack
                    //that way, we can just start from index 0 of theStack and it's simpler
                    string s = letterList.ElementAt(i);
                    theStack.Add(s);
                }

                int x = 0;
                //now we compare the stack against the second half of the input
                for (int i = halfLenRoundedUp+1; i < inputLen; i++)
                {//+1 since the middle letter doesn't matter for an odd num of letters
                    string a = letterList.ElementAt(i);
                    string b = theStack.ElementAt(0);
                    x++;
                    if (String.Equals(a, b))
                    {
                        //so far, so good.
                        //loop keeps going
                        isPalindrome = true;
                    }
                    else
                    {
                        //we now know that this isn't a palindrome;
                        //no further testing needed
                        isPalindrome = false;
                        break;
                    }
                }
            }


            else 
            {
                //something's gone wrong
                //[shrugging emoji]
            }

            return isPalindrome;
        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void button2_Click(object sender, EventArgs e)
        {
            this.Hide();
            System.Diagnostics.Process.Start(Application.StartupPath.ToString() + @"\DFA.exe");
        }
    }
}
